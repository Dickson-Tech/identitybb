openapi: 3.1.0
x-stoplight:
  id: 6f1syzijynu40
info:
  title: Identity Provider
  version: '1.0'
  description: |-
    <b>Abbreviations:</b></br>
    OIDC - Open ID Connect</br>
    IdP - Identity provider</br>
    PMP - Partner Management portal</br>
    KYC - Know Your Customer</br>
    IDA - Authentication server</br>


    </br>
    <b>Initial Setup:</b>
    </br>
    1. Generate IdP root key.
    </br> 
    2. Generate IdP master keys.

        -> IDP_SERVICE used to sign id_token and access_token.
        
        -> IDP_PARTNER used to onboard IDP as one of the MISP in PMP & IDA.
        
        
       
  license:
    identifier: MPL-2.0
    name: MPL-2.0
servers:
  - url: 'https://dev.mosip.net/v1/idp'
paths:
  /client-mgmt/oidc-client:
    post:
      summary: Create OIDC Client Endpoint
      operationId: post-client
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: 'Name of the client, length constraint required.'
              properties:
                id:
                  type: string
                version:
                  type: string
                requestTime:
                  type: string
                  format: date-time
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                metadata:
                  type: object
                  properties:
                    '':
                      type: string
                request:
                  type: object
                  required:
                    - clientId
                    - clientName
                    - relyingPartyId
                    - logoUri
                    - authContextRefs
                    - publicKey
                    - userClaims
                    - grantTypes
                    - clientAuthMethods
                  properties:
                    clientId:
                      type: string
                      description: 'Unique OIDC client id (Case-Sensitive). It is validated in IdP. If duplicates found, request will be rejected.'
                      example: e-health-service
                      maxLength: 50
                      minLength: 1
                    clientName:
                      type: string
                      minLength: 1
                      maxLength: 256
                      description: Name of OIDC client.
                      example: Health Service
                    relyingPartyId:
                      type: string
                      description: |-
                        Relying Party ID of the client. This may be used further to fetch KYC from IDA servers.

                        Note: Use the client Id as relyingPartyId if there is no separate concept of relying party in the IDA system.
                      example: bharathi-inc
                      minLength: 1
                      maxLength: 50
                    logoUri:
                      type: string
                      description: Relying party logo URL which will be displayed in the OIDC login and consent pages.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: Uri to where the response with authorization_code to be redirected. This will be cross verified with the redirect_uri query parameter sent in the authorize request.
                      items:
                        type: string
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - 'mosip:idp:acr:static-code'
                          - 'mosip:idp:acr:generated-code'
                          - 'mosip:idp:acr:linked-wallet'
                          - 'mosip:idp:acr:biometrics'
                    publicKey:
                      type: object
                      description: |-
                        OIDC client's public key used to verify the client's signature at IdP. 
                        Format : Json Web Key (JWK)
                    userClaims:
                      type: array
                      description: Allowed user info claims.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - phone_number
                          - picture
                          - address
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - private_key_jwt
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  id: string
                  version: string
                  requestTime: '2019-08-24T14:15:22.340Z'
                  metadata:
                    '': string
                  request:
                    clientId: e-health-service
                    clientName: Health Service
                    relyingPartyId: bharath-gov
                    logoUri: 'http://example.com'
                    publicKey: {}
                    authContextRefs:
                      - 'mosip:idp:acr:static-code'
                    userClaims:
                      - name
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
        description: ''
      description: |-
        Create OIDC client request raised from PMP to IdP for a relying party.
        One relying party can create multiple OIDC clients.

        Authentication & Authorization: Scope based.

        IdP will accept client registration request from PMP only with valid authorization token. Expected scope in the token is "<b>add_oidc_client</b>".

        On create, OIDC client status will be set to "<b>active</b>".
      x-internal: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  version:
                    type: string
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: Client id as provided in the request.
                  responseTime:
                    type: string
                  errors:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - duplicate_client_id
                            - invalid_public_key
                            - invalid_input
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_rp_id
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                        errorMessage:
                          type: string
      tags:
        - Management
    parameters: []
  '/client-mgmt/oidc-client/{client_id}':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: Client Identifier
    put:
      summary: Update OIDC Client Endpoint
      operationId: put-oidc-client-client_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  version:
                    type: string
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: OIDC client identifier.
                    required:
                      - clientId
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                        errorMessage:
                          type: string
      description: |-
        OIDC-Client update endpoint. Invoked from PMP with valid OIDC client id.

        Authentication & Authorization: Scope based.

        IdP will accept client registration request from PMP only with valid authorization token. Expected scope in the token is "<b>update_oidc_client</b>".
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                version:
                  type: string
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - clientName
                    - status
                    - logoUri
                    - redirectUris
                    - userClaims
                    - authContextRefs
                    - grantTypes
                    - clientAuthMethods
                  properties:
                    clientName:
                      type: string
                      description: Name of the OIDC client.
                      minLength: 1
                      maxLength: 256
                    status:
                      type: string
                      enum:
                        - active
                        - inactive
                      description: Status of OIDC client.
                    logoUri:
                      type: string
                      description: Relying party or client specific logo URI.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: Uri to where the response with authorization_code to be redirected. This will be cross verified with the redirect_uri query parameter sent in the authorize request.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        format: uri
                    userClaims:
                      type: array
                      description: Allowed user claims.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - phone_number
                          - picture
                          - address
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - 'mosip:idp:acr:static-code'
                          - 'mosip:idp:acr:generated-code'
                          - 'mosip:idp:acr:linked-wallet'
                          - 'mosip:idp:acr:biometrics'
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. Currently "private_key_jwt"
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - private_key_jwt
                metadata:
                  type: object
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  id: string
                  version: string
                  requestTime: '2019-08-24T14:15:22.340Z'
                  request:
                    clientName: Health Service
                    status: active
                    logoUri: 'http://example.com'
                    redirectUris:
                      - 'http://example.com'
                    userClaims:
                      - name
                    authContextRefs:
                      - 'mosip:idp:acr:static-code'
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
                  metadata: {}
      tags:
        - Management
  /authorize:
    get:
      summary: Authorization Endpoint
      operationId: get-authorize
      description: |-
        This URL lands enduser to IdP single page JS application. UI is rendered based on the provided display request parameter.

        On load of the page IdP UI echoes all the authorize request parameters to oauth-details endpoint for server-sdie validation.

        Authentication & authroization : None
      parameters:
        - schema:
            type: string
            default: openid profile
            enum:
              - openid profile
              - openid
              - profile
              - email
              - address
              - phone
              - offline_access
          in: query
          name: scope
          description: Secifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the openid scope value.
          required: true
        - schema:
            type: string
            enum:
              - code
          in: query
          name: response_type
          description: 'Value that determines the authorization processing flow to be used. When using the Authorization Code Flow, this value is code.'
          required: true
        - schema:
            type: string
            maxLength: 256
          in: query
          name: client_id
          required: true
          description: OAuth 2.0 Client Identifier valid at the Authorization Server
        - schema:
            type: string
            format: uri
          in: query
          name: redirect_uri
          description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
          required: true
        - schema:
            type: string
            maxLength: 256
          in: query
          description: 'Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.'
          name: state
        - schema:
            type: string
          in: query
          description: 'String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token.'
          name: nonce
        - schema:
            type: string
            enum:
              - page
              - popup
              - touch
              - wap
          in: query
          name: display
          description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.
        - schema:
            type: string
            enum:
              - none
              - login
              - consent
              - select_account
            example: consent
          in: query
          name: prompt
          description: 'Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent.'
        - schema:
            type: number
          in: query
          name: max_age
          description: 'Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.'
        - schema:
            type: string
          in: query
          name: ui_locales
          description: 'End-User''s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value "fr-CA fr en" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
        - schema:
            type: string
          in: query
          name: acr_values
          description: 'Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.'
        - schema:
            type: string
          in: query
          name: claims_locales
          description: 'End-User''s preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
        - schema:
            type: string
          in: query
          name: claims
          description: This parameter is used to request that specific Claims be returned. The value is a JSON object listing the requested Claims. The claims parameter value is represented in an OAuth 2.0 request as UTF-8 encoded JSON
      responses:
        '200':
          description: |-
            OK

            Loads JS application, and validates the provided query parameters using oauth-details endpoint.
      tags:
        - OAuth
    parameters: []
  /authorization/oauth-details:
    post:
      summary: OAuth Details Endpoint
      operationId: post-oauth-details
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  version:
                    type: string
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This value is passed through unmodified from the /oauth-details request to the /auth-code request.
                      authFactors:
                        type: array
                        description: |-
                          Auth factors defines the authentication screens displayed in IDP frontend.
                          More than one authFactor may be resolved or combination of authfactors.
                          Precedence of authFactors is based on its order  
                        items:
                          $ref: '#/components/schemas/AuthFactor'
                      essentialClaims:
                        type: array
                        description: Array holds all the requested essential claims.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: Array holds all the requested optional claims.
                        items:
                          type: string
                      authorizeScopes:
                        type: array
                        description: Scopes to be permitted by enduser.
                        items:
                          type: string
                      configs:
                        type: object
                        description: UI configuration key-value pairs.
                    required:
                      - transactionId
                      - authFactors
                      - essentialClaims
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_redirect_uri
                            - invalid_scope
                            - no_acr_registered
                            - unknown_error
                        errorMessage:
                          type: string
              examples:
                example-1:
                  value:
                    id: id
                    version: '1.0'
                    responseTime: '2022-09-22T08:03:45.287Z'
                    response:
                      transactionId: vKb8cVbq9PX_yt46_hX0xlBJNExl9cnYtL8kGRxU5OM
                      clientName: Health service OIDC Client
                      logoUrl: 'https://health-services.com/logo.png'
                      authFactors:
                        - - type: PIN
                            count: 0
                            subTypes: null
                      authorizeScopes: []
                      essentialClaims:
                        - given_name
                        - email
                      voluntaryClaims:
                        - birthdate
                        - gender
                        - phone
                      configs:
                        sbi.env: Staging
                        sbi.threshold.face: 40
                        sbi.threshold.finger: 40
                        sbi.threshold.iris: 40
                    errors: null
      description: |
        OAuth details Endpoint is raised from the single page JS application on page load.

        OAuth details Endpoint validates the provided request parameters and resolves the required authentication factors. Combination of resolved authentication factors and the consent details are sent back as response with a unique transactionId.

        The transcationId in the response is used to identify/maintain the enduser pre-auth session. This pre-auth session has timeout (configurable in Idp service).

        Authentication & authroization : None, starts the pre-auth session with unique transactionId.

        All the query params passed to /authorize API MUST be sent to /oauth-details API. All these parameters MUST be validated in IDP before returning success response.

        1. Validates the clientId.
        2. validates redirectUri is one of the redirectUri during client create/update.
        3. validates display,responseType,prompts values are part of supported values in Idp properties.
        4. scope / acrValues / claims / locales / claim_locales - unknown values are ignored. Only valid values are considered.
        5. scopes like profile, email and phone are allowed only if "openid" is also part of the requested scope.
        6. Claims request parameter is allowed, only if 'openid' is part of the scope request parameter
        7. claims considered only if part of registered claims.
        8. ACR in claims request parameter is given the first priority over acr_values query pararmeter.if none of them are part of the registered acrs, Registered ACRs are only considered to derive the authfactors.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                version:
                  type: string
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - scope
                    - responseType
                    - clientId
                    - redirectUri
                    - nonce
                  properties:
                    scope:
                      type: string
                      description: Secifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the openid scope value.
                    responseType:
                      type: string
                      description: 'Value that determines the authorization processing flow to be used. When using the Authorization Code Flow, this value is code.'
                    clientId:
                      type: string
                      description: OAuth 2.0 Client Identifier valid at the Authorization Server
                    redirectUri:
                      type: string
                      description: Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered
                    display:
                      type: string
                      description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.
                    prompt:
                      type: string
                      description: 'Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent.'
                    acrValues:
                      type: string
                      description: |-
                        Space separated ACR values, Unknown ACR are ignored. Only registered ACR values will be considered.
                        if none of the provided acr value is among the registered values, Error response is returned with error code "invalid_acr".
                    claims:
                      $ref: '#/components/schemas/Claim'
                    maxAge:
                      type: number
                      description: 'Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the End-User. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.'
                    claimsLocales:
                      type: string
                      description: 'End-User''s preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
                    state:
                      type: string
                      description: client state value echoed.
                    nonce:
                      type: string
                      description: Client's nonce value echoed.
                metadata:
                  type: object
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  id: id
                  version: '1.0'
                  requestTime: '2022-09-22T08:01:10.081Z'
                  request:
                    clientId: healthservicev1
                    scope: openid resident-service profile
                    responseType: code
                    redirectUri: 'http://health-services.com/userprofile'
                    display: popup
                    prompt: login
                    acrValues: 'mosip:idp:acr:static-code mosip:idp:acr:generated-code'
                    claims:
                      userinfo:
                        given_name:
                          essential: true
                        phone: null
                        email:
                          essential: true
                        picture:
                          essential: false
                        gender:
                          essential: false
                      id_token: {}
                    nonce: 973eieljzng
                    state: eree2311
                    claimsLocales: en
      parameters: []
      tags:
        - UI
    parameters: []
  /authorization/send-otp:
    post:
      summary: Send OTP Endpoint
      operationId: post-send-otp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  version:
                    type: string
                  responseTime:
                    type: string
                  response:
                    type: object
                    description: 'Successful message, or null if failed to deliver OTP.'
                    properties:
                      transactionId:
                        type: string
                        description: oauth-details transactionId is used until the /token call.
                      messageCode:
                        type: string
                        description: Send OTP status message as returned from IDA servers.
                    required:
                      - transactionId
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in Idp server. if failure from IDA, the same error is relayed in this response.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_request
                        errorMessage:
                          type: string
      description: |-
        Send OTP Endpoint to connect to IDA with the provided UIN/VID to generate OTP. Returns status of OTP generation and sending the same to enduser over configured/chosen OTP channel.

        Send OTP Endpoint is raised from the single page JS application.

        Authentication & authroization : None, validates transactionId, must be same as the one started with oauth-details API.

        1. Validates the transactionId.
        2. Validates null / empty individualId.
        3. Delegates the call to integrated IDA.
        4. Relays error from IDA to UI on failure.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                version:
                  type: string
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - transactionId
                    - individualId
                    - channel
                  properties:
                    transactionId:
                      type: string
                      description: oauth-details transactionId is used until the /token call.
                    individualId:
                      type: string
                      description: Actual UIN or VID value of the authenticating enduser.
                    channel:
                      enum:
                        - email
                        - sms
                      description: Channel to be used to deliver request OTP.
                      type: string
                metadata:
                  type: object
              required:
                - requestTime
                - request
        description: ''
      parameters: []
      tags:
        - UI
    parameters: []
  /authorization/authenticate:
    post:
      summary: Authentication Endpoint
      operationId: post-authenticate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  version:
                    type: string
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId sent in the oauth-details response.
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in Idp server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - auth_failed
                            - invalid_request
                        errorMessage:
                          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                version:
                  type: string
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - transactionId
                    - individualId
                    - challengeList
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the oauth-details response.
                    individualId:
                      type: string
                      description: ' User identifier (UIN/VID).'
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
                metadata:
                  type: object
              required:
                - requestTime
                - request
      description: |
        Authentication endpoint, takes following input: user identifier (UIN/VID) and auth challenge.

        Supported auth-challenge depends on the integrated authentication server.

        Mock-authentication-server : supports only <b>pin</b> based authentication.

        Authentication & authroization : None, validates transactionId, must be same as the one started with oauth-details API.

        1. Validates transactionId.
        2. Validates null / empty individualId.
        3. invokes kyc-auth call to integrated authentication server (IDA).
        4. Relays error from integrated authentication server to UI on failure.


        On Authentication Success: Only transaction Id is returned in the below response without any errors.

        On Authentication Failure: Error list will be set with the errors returned from the integrated authentication server.
      parameters: []
      tags:
        - UI
    parameters: []
  /authorization/auth-code:
    post:
      summary: Authorization Code Endpoint
      operationId: post-auth-code
      description: |-
        This endpoint is invoked from JS application to send the accepted consent and permitted scopes.

        Authentication & authroization : None, validates transactionId, must be same as the one started with oauth-details API.

        1. Validates transactionId. If valid, stores the accepted claims and permitted scopes in the cache and returns back the authorization code.

        TODO:
        Validate accepted claims and permitted scopes in the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                version:
                  type: string
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - transactionId
                  properties:
                    transactionId:
                      type: string
                      description: Transaction id echoed starting from /authorize call.
                    permittedAuthorizeScopes:
                      type: array
                      description: List of permitted scopes by end-user.
                      items:
                        type: string
                    acceptedClaims:
                      type: array
                      description: List of accepted essential and voluntary claims by end-user.
                      items:
                        type: string
                metadata:
                  type: object
              required:
                - requestTime
                - request
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  version:
                    type: string
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      code:
                        type: string
                        description: Authorization code. Required to obtain the ID token and / or access token from the /token endpoint.
                      redirectUri:
                        type: string
                        description: Client's validated redirect URI.
                      nonce:
                        type: string
                        description: 'The echoed nonce value, if one was passed with the request. Clients must validate the value before proceeding.'
                      state:
                        type: string
                        description: 'The echoed state value, used to maintain state between the request and the callback'
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_request
                            - invalid_transaction
                        errorMessage:
                          type: string
      tags:
        - UI
    parameters: []
  /oauth/token:
    post:
      summary: Token Endpoint
      operationId: post-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_token:
                    type: string
                    description: Identity token.
                  access_token:
                    type: string
                    description: The access token. The token that will be used to call the UserInfo endpoint.
                  token_type:
                    type: string
                    default: Bearer
                    enum:
                      - Bearer
                    description: 'The type of the access token, set to Bearer'
                  expires_in:
                    type: number
                    format: duration
                    description: 'The lifetime of the access token, in seconds.'
                required:
                  - id_token
                  - access_token
                  - token_type
                  - expires_in
          headers:
            Cache-Control:
              schema:
                type: string
                enum:
                  - no-store
            Pragma:
              schema:
                type: string
                enum:
                  - no-cache
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error code.
                    enum:
                      - invalid_transaction
                      - invalid_assertion
                      - invalid_redirect_uri
                      - invalid_input
                      - unknown_error
                      - invalid_request
                      - invalid_assertion_type
                  error_description:
                    type: string
                    description: Optional text providing additional information about the error that occurred.
                required:
                  - error
      description: |-
        Client invokes this Token endpoint with authorization code to get ID and access token.

        Authentication & authroization : validates the code (authorization code) in the request.

        1. The only supported client authentication methods : <b>private_key_jwt</b>
        2. clientAssertion is a signed JWT with Clients private key, corresponding public key should be shared with IdP during the OIDC client registration process.
        3. clientAssertion JWT payload must be as below: 

        The JWT MUST contain the following REQUIRED Claim Values and MAY contain the following OPTIONAL Claim Values:

        <b>iss</b>

        REQUIRED. Issuer. This MUST contain the client_id of the OAuth Client.

        <b>sub</b>

        REQUIRED. Subject. This MUST contain the client_id of the OAuth Client.

        <b>aud</b>

        REQUIRED. Audience. The aud (audience) Claim. Value that identifies the Authorization Server as an intended audience. The Authorization Server MUST verify that it is an intended audience for the token. The Audience SHOULD be the URL of the Authorization Server's Token Endpoint.

        <b>exp</b>

        REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.

        <b>iat</b>

        REQUIRED. Time at which the JWT was issued.

        <b>Note:</b>
        The ClientAssertion JWT MAY contain other Claims. Any Claims used that are not understood MUST be ignored.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - authorization_code
                  description: Authorization code grant type.
                code:
                  type: string
                  description: 'Authorization code, sent as query param in the client''s redirect URI.'
                client_id:
                  type: string
                  description: Client Id of the OIDC client.
                client_assertion_type:
                  type: string
                  enum:
                    - 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  description: Type of the client assertion part of this request.
                client_assertion:
                  type: string
                  description: 'Private key signed JWT, This JWT payload structure is defined above as part of request description.'
                redirect_uri:
                  type: string
                  description: Valid client redirect_uri. Must be same as the one sent in the authorize call.
              required:
                - grant_type
                - code
                - client_id
                - client_assertion_type
                - client_assertion
                - redirect_uri
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: Authorization code grant type.
                  enum:
                    - authorization_code
                code:
                  type: string
                  description: 'Authorization code, sent as query param in the client''s redirect URI.'
                client_id:
                  type: string
                  description: Client Id of the OIDC client.
                client_assertion_type:
                  type: string
                  enum:
                    - 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  description: Type of the client assertion part of this request.
                client_assertion:
                  type: string
                  description: 'Private key signed JWT, This JWT payload structure is defined above as part of request description.'
                redirect_uri:
                  type: string
                  description: Valid client redirect_uri. Must be same as the one sent in the authorize call.
              required:
                - grant_type
                - code
                - client_id
                - client_assertion_type
                - client_assertion
                - redirect_uri
      tags:
        - OAuth
    parameters: []
  /oidc/userinfo:
    get:
      summary: UserInfo Endpoint
      tags:
        - OIDC
      responses:
        '200':
          description: OK
          content:
            application/jwt:
              schema:
                type: string
                format: jwt
                description: 'The response is signed and then encrypted, with the result being a Nested JWT. Signed using IDA server''s private key. Signed full JWT will then be encrypted using OIDC client''s public key.'
        '401':
          description: Unauthorized
          headers:
            WWW-AUTHENTICATE:
              schema:
                type: string
                enum:
                  - invalid_token
                  - unknown_error
              description: 'Bearer error=invalid_token,  error_description=MOSIPIDP123: A userinfo request was made with an access token that was not recognized.'
      operationId: get-userinfo
      parameters:
        - schema:
            type: string
            example: Bearer <access token as received in token endpoint response>
          in: header
          name: Authorization
          description: 'Need to have the Bearer access token,Must start with word Bearer.'
          required: true
      description: |-
        The UserInfo Endpoint returns accepted Claims about the authenticated End-User. OIDC Client makes a request to the UserInfo Endpoint using an Access Token obtained through IDP's /token endpoint. Claims are returned as JSON, collection of name and value pairs for the Claims.


        Eg 1: OIDC Client requested claims 

        name : { "essential" : true }
        phone: { "essential" : true }

        Response 1: Enduser after authentication, provided his/her consent to both name and phone. Response will look as below:

        { "name" : "xyz", "phone" : "033456743" }

        Resonse 2: Enduser after authentication, provided his/her consent to only name. Response will look as below:

        { "name" : "xyz" }

        Response 3: Claims requested with claims_locales : "en fr"

        { "name#en" : "xyz", "name#fr" : "xyz in french", "phone" : "033456743" } 

        Userinfo Claims
            sub - partner-specific user token (PSUT)
            name
            address
            gender
            birthdate
            profile photo
            email
            phone
            locale
            Custom
                individual_id (What we share in this claim is a system-level config and it can be UIN, perceptual VID or temporary VID)
    parameters: []
  /.well-known/openid-configuration:
    get:
      summary: Configuration Endpoint
      tags:
        - OIDC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    description: URL using the https scheme with no query or fragment component that the RP asserts as its Issuer Identifier.This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.
                  authorization_endpoint:
                    type: string
                    description: URL of the OAuth 2.0 Authorization Endpoint.
                  token_endpoint:
                    type: string
                    description: URL of the OAuth 2.0 Token Endpoint.
                  jwks_uri:
                    type: string
                    description: 'URL of the OP''s JSON Web Key Set [JWK] document. '
                  registration_endpoint:
                    type: string
                    description: URL of Client Registration Endpoint.
                  scopes_supported:
                    type: string
                    description: 'JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports.'
                    enum:
                      - openid
                  response_types_supported:
                    type: string
                    description: JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.
                    enum:
                      - code
                  acr_values_supported:
                    type: string
                    description: ' JSON array containing a list of the Authentication Context Class References that IDP supports.'
                  userinfo_signing_alg_values_supported:
                    type: string
                    description: 'JSON array containing a list of the JWS [JWS] signing algorithms.'
                  userinfo_encryption_alg_values_supported:
                    type: string
                    description: 'SON array containing a list of the JWE [JWE] encryption algorithms.'
                  userinfo_encryption_enc_values_supported:
                    type: string
                    description: 'JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT.'
                  token_endpoint_auth_methods_supported:
                    type: string
                    description: JSON array containing a list of Client Authentication methods supported by this Token Endpoint.
                    enum:
                      - private_key_jwt
                  display_values_supported:
                    type: string
                    description: JSON array containing a list of the display parameter values that the OpenID Provider supports.
                  claim_types_supported:
                    type: string
                    description: JSON array containing a list of the Claim Types that the OpenID Provider supports.
                    enum:
                      - normal
                      - aggregated
                      - distributed
                  claims_supported:
                    type: string
                    description: JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for.
                  claims_locales_supported:
                    type: string
                    description: Languages and scripts supported for values in Claims being returned.
                  ui_locales_supported:
                    type: string
                    description: Languages and scripts supported for the user interface.
                required:
                  - issuer
                  - authorization_endpoint
                  - token_endpoint
                  - jwks_uri
                  - registration_endpoint
                  - scopes_supported
                  - response_types_supported
      operationId: get-.well-known-openid-configuration
      description: |-
        NOTE : Endpoint Under discussion

        Reference : https://openid.net/specs/openid-connect-discovery-1_0.html

        TODO - https://www.rfc-editor.org/rfc/rfc5646.html
    parameters: []
  /.well-known/jwks.json:
    get:
      summary: JSON Web Key Set Endpoint
      tags:
        - OIDC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kid:
                          type: string
                          description: The certificate's Key ID
                        alg:
                          type: string
                          description: 'The algorithm used with the Key. Valid value: RS256'
                          enum:
                            - RS256
                        use:
                          type: string
                          description: 'How the Key is used. Valid value: sig'
                          enum:
                            - sig
                        kty:
                          type: string
                          description: 'Cryptographic algorithm family for the certificate''s Key pair. Valid value: RSA'
                          enum:
                            - RSA
                        e:
                          type: string
                          description: RSA Key value (exponent) for Key blinding
                        'n':
                          type: string
                          description: RSA modulus value
                        status:
                          type: string
                          enum:
                            - ACTIVE
                            - EXPIRED
                            - NEXT
                          description: |-
                            ACTIVE Key is used to sign tokens issued by the Idp server.
                            NEXT Key is the next Key that the IdP Server uses to sign tokens when Keys are rotated. The NEXT Key might not be listed if it hasn't been generated yet.
                            EXPIRED Key is the previous Key that the IdP Server used to sign tokens. The EXPIRED Key might not be listed if no Key has expired or the expired Key has been deleted.
                        x5c:
                          type: string
                          description: Certificate to validate the Oauth server trust.
                      required:
                        - kid
                        - alg
                        - use
                        - kty
                        - e
                        - 'n'
      operationId: get-certs
      description: |-
        NOTE : Endpoint Under discussion

        Endpoint to fetch all the public keys of the IdP server.Returns public key set in the JWKS format.
    parameters: []
  /introspect:
    get:
      summary: Introspect Endpoint
      tags:
        - OIDC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
                required:
                  - error
                  - error_description
      operationId: get-introspect
      description: |-
        NOTE : Endpoint Under discussion

        This endpoint takes an access token or ID token and returns a boolean that indicates whether it is active. If the token is active, additional data about the token is also returned. If the token is invalid, expired, or revoked, it is considered inactive.
      parameters:
        - schema:
            type: string
          in: query
          name: client_id
          description: OIDC client Id
          required: true
        - schema:
            type: string
          in: query
          name: token
          description: An access token or ID token
          required: true
        - schema:
            type: string
            enum:
              - access_token
              - id_token
          in: query
          name: token_type_hint
          description: 'Indicates the type of token being passed. Valid values: access_token, id_token'
          required: true
    parameters: []
components:
  schemas:
    Error:
      title: Error
      x-stoplight:
        id: et1b1aqs2g0r3
      type: object
      description: Any server-side errors are returned in this error object.
      properties:
        errorCode:
          type: string
          description: Predefined error codes.
        errorMessage:
          type: string
          description: |
            Descriptive error message.
      required:
        - errorCode
        - errorMessage
    Claim:
      title: Claim
      x-stoplight:
        id: z7c32949w8qet
      type: object
      description: |
        The userinfo and id_token members of the claims request both are JSON object. if null, Indicates that this Claim is being requested as Voluntary Claim.

        Note: Unknown claim names either in userinfo or id_token are ignored.
      properties:
        userinfo:
          type: object
          properties:
            name:
              $ref: '#/components/schemas/ClaimDetail'
            given_name:
              $ref: '#/components/schemas/ClaimDetail'
            email:
              $ref: '#/components/schemas/ClaimDetail'
            gender:
              $ref: '#/components/schemas/ClaimDetail'
            birthdate:
              $ref: '#/components/schemas/ClaimDetail'
            phone_number:
              $ref: '#/components/schemas/ClaimDetail'
            profile_photo:
              $ref: '#/components/schemas/ClaimDetail'
            address:
              $ref: '#/components/schemas/ClaimDetail'
            locale:
              $ref: '#/components/schemas/ClaimDetail'
            individual_id:
              $ref: '#/components/schemas/ClaimDetail'
        id_token:
          type: object
          properties:
            name:
              $ref: '#/components/schemas/ClaimDetail'
            acrs:
              $ref: '#/components/schemas/ClaimDetail'
        locales:
          type: array
          items:
            type: string
    ClaimDetail:
      title: ClaimDetail
      x-stoplight:
        id: kypheo15jidj9
      type: object
      properties:
        essential:
          type: boolean
          description: |
            Indicates whether the Claim being requested is an Essential Claim. If the value is true, this indicates that the Claim is an Essential Claim. The default is false.
        value:
          type: string
          description: |-
            Requests that the Claim be returned with a particular value. For instance the Claim request.

            "sub": {"value": "248289761001"} can be used to specify that the request apply to the End-User with Subject Identifier 248289761001.
        values:
          type: array
          description: 'Requests that the Claim be returned with one of a set of values, with the values appearing in order of preference.'
          items:
            type: string
    AuthChallenge:
      title: AuthChallenge
      x-stoplight:
        id: n3fy2qkg9r7h2
      type: object
      description: Model to take any type of challenge from the enduser as part of authenticate request.
      properties:
        authFactorType:
          type: string
          description: Defines the type of auth challenge. It should be same as authfactor.type (oauth-details response).
          enum:
            - otp
            - pin
            - bio
        challenge:
          type: string
          description: Actual challenge as string.
      required:
        - authFactorType
        - challenge
    AuthFactor:
      title: AuthFactor
      x-stoplight:
        id: m6lnp87wondln
      type: object
      properties:
        type:
          type: string
          description: Name of the authentication method
          enum:
            - otp
            - pin
            - pwd
            - face
            - iris
            - finger
        count:
          type: string
          description: 'Applicable for biometric based authentication, number of bio segments to be captured for authentication.'
        bioSubTypes:
          type: array
          description: Applicable for biometric based authentication. Can be mmore specific about which bio segments should be captured.
          items:
            type: string
      required:
        - type
  securitySchemes: {}
